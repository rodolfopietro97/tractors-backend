"""
Django settings for tractors_be project.

Generated by 'django-admin startproject' using Django 4.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

# Standard Libraries
import os
from datetime import timedelta
from pathlib import Path

import dj_database_url

# Dotenv needs to be loaded before any other settings
from dotenv import load_dotenv

# Cloud Storage needed imports
from google.cloud import storage
from google.oauth2 import service_account

# For Render database

# Load environment variables from .env file

load_dotenv()

# Environment variables to handle the frontend URL

FRONTEND_URL_ENV = os.getenv("FRONTEND_URL")
"""
Main frontend URL.
This is the base URL for the frontend.
"""

LOGIN_PAGE_URL_ENV = os.getenv("LOGIN_PAGE_URL")
"""
Login page URL on the frontend
This is the URL where the user will be redirected after the login is done.
"""

EMAIL_CONFIRM_REDIRECT_BASE_URL_ENV = os.getenv("EMAIL_CONFIRM_REDIRECT_BASE_URL")
"""
Email confirm redirect base URL.
After email verification is done (click confirm) on a backend link.
"""

PASSWORD_RESET_CONFIRM_REDIRECT_BASE_URL_ENV = os.getenv(
    "PASSWORD_RESET_CONFIRM_REDIRECT_BASE_URL"
)
"""
Password reset confirm redirect base URL.
After the password reset is done (click confirm) on a backend link.
"""

# Google Cloud Storage Variables

GS_CREDENTIALS = service_account.Credentials.from_service_account_file(
    os.getenv("CLOUD_STORAGE_CREDENTIAL_JSON_FILE_PATH")
)
"""
Google Cloud Storage credentials.
Used for django-storages
"""

GS_BUCKET_NAME = os.getenv("CLOUD_STORAGE_BUCKET_NAME")
"""
Name of the Google Cloud Storage bucket.
"""

CLOUD_STORAGE_CLIENT = storage.Client(credentials=GS_CREDENTIALS)
"""
Main Google Cloud Storage client.
Used to load brands and create fixture
"""

CLOUD_STORAGE_BUCKET_INSTANCE = CLOUD_STORAGE_CLIENT.get_bucket(GS_BUCKET_NAME)
"""
Google Cloud Storage bucket main instance.
Used to load brands and create fixture
"""

CLOUD_STORAGE_ROOT_FOLDER_NAME = os.getenv("CLOUD_STORAGE_ROOT_FOLDER_NAME")
"""
Root folder in Google Cloud Storage.
This foler contains all the files related to brands.
"""

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
"""
Base directory of the project.
"""

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")
"""
Django secret key.
"""

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG") == "True"
"""
Debug mode.
"""

ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS").split(" ")
"""
List of allowed hosts.
"""

# Cors
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True
# @TODO Uncomment after frontend will be deployed
# CORS_ALLOWED_ORIGINS = os.getenv("FRONTEND_URL").split(" ")


# Application definition

INSTALLED_APPS = [
    # Jazzmin dashboard
    "jazzmin",
    # Django default applications
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    # Whitenoise for static files in development (UNCOMMENT if you don't want to use --nostatic in run-dev.sh when running the server)
    # "whitenoise.runserver_nostatic",
    "django.contrib.staticfiles",
    # My applications
    "users",
    "brands",
    "customers",
    "contacts",
    "companies",
    # Django REST framework
    "rest_framework",
    "rest_framework.authtoken",
    # Django REST framework Authentication
    "dj_rest_auth",
    # Django REST framework Registration
    "django.contrib.sites",
    "allauth",
    "allauth.account",
    # 'allauth.socialaccount',
    "dj_rest_auth.registration",
    # Allow CORS
    "corsheaders",
]

# Authentication settings
SITE_ID = 1
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = "mandatory"

# Url of login page
LOGIN_URL = f"{FRONTEND_URL_ENV}/{LOGIN_PAGE_URL_ENV}"

# After email verification is done (click confirm) on a backend link
EMAIL_CONFIRM_REDIRECT_BASE_URL = (
    f"{FRONTEND_URL_ENV}/{EMAIL_CONFIRM_REDIRECT_BASE_URL_ENV}"
)

# After the password reset is done (click confirm) on a backend link
PASSWORD_RESET_CONFIRM_REDIRECT_BASE_URL = (
    f"{FRONTEND_URL_ENV}/{PASSWORD_RESET_CONFIRM_REDIRECT_BASE_URL_ENV}"
)

# Send emails
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = os.getenv("EMAIL_HOST")
EMAIL_PORT = os.getenv("EMAIL_PORT")
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")
# Google
EMAIL_USE_TLS = True

# Fastmail
# EMAIL_USE_SSL = False
CONTACT_FORM_RECIPIENT_EMAIL = os.getenv("CONTACT_FORM_RECIPIENT_EMAIL")

# Settings for Django REST framework
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": ("dj_rest_auth.jwt_auth.JWTCookieAuthentication",)
}

# Settings for JWT
REST_AUTH = {
    "USE_JWT": True,
    "SESSION_LOGIN": True,
    "JWT_AUTH_COOKIE": "auth-token",
    "JWT_AUTH_HTTPONLY": False,
    "JWT_AUTH_REFRESH_COOKIE": "refresh-token",
    "ACCESS_TOKEN_LIFETIME": timedelta(days=1),
    # 'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    # 'REST_USE_JWT': True,
}

MIDDLEWARE = [
    # Cors
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    # Use whitenoise for static files
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",
    "django.middleware.common.CommonMiddleware",
    # Custom middleware to lowercase the username and email of the user
    "customers.middleware.EmailUsernameLowercaseMiddleware",
]

# @UNCOMMENT next line if you want to use whitenoise for static files
# STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"


# HTTPS
# SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
# SECURE_SSL_REDIRECT = True

ROOT_URLCONF = "tractors_be.urls"

# Templates
TEMPLATES_DIR = "templates"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(BASE_DIR, TEMPLATES_DIR),
            os.path.join(BASE_DIR, TEMPLATES_DIR, "account"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "tractors_be.wsgi.application"

# Database
DATABASES = {
    "default": dj_database_url.config(
        default=os.getenv("DATABASE_URL"),
        conn_max_age=600,
    )
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"
"""
Url for static files.
"""

# This production code might break development mode, so we check whether we're in DEBUG mode
if not DEBUG:
    # Tell Django to copy static assets into a path called `staticfiles` (this is specific to Render)
    STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

    STORAGES = {
        # Whitenoise storage for static files
        "staticfiles": {
            "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
        },
    }

# # Uploads
# MEDIA_ROOT = BASE_DIR / "static/uploads"
# MEDIA_URL = "/uploads/"
